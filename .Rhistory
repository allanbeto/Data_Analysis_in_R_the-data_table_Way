knitr::opts_chunk$set(echo = TRUE)
install.packages("data.table")
packrat::snapshot(prompt = FALSE)
library("data.table")
# Create my_first_data_table
my_first_data_table <- data.table(x = c("a", "b", "c", "d", "e"),
y = c(1, 2, 3, 4, 5)
)
# Create a data.table using recycling
DT <- data.table(a = c(1L, 2L), b = LETTERS[1:4])
# Print the third row to the console
DT[3]
# Print the second and third row to the console without using commas
DT[2:3]
# The data.table package is preloaded
library("data.table")
# Create my_first_data_table
my_first_data_table <- data.table(x = c("a", "b", "c", "d", "e"),
y = c(1, 2, 3, 4, 5)
)
# Create a data.table using recycling
DT <- data.table(a = c(1L, 2L), b = LETTERS[1:4])
DT
# Print the third row to the console
DT[3]
# Print the second and third row to the console without using commas
DT[2:3]
# DT and the data.table package are pre-loaded
# Print the second to last row of DT using .N
DT[.N-1]
# Print the column names of DT
names(DT)
# Print the number or rows and columns of DT
dim(DT)
# Print a new data.table containing rows 2, 2, and 3 of DT
DT[c(2,2,3)]
# Subset rows 1 and 3, and columns B and C
DT[c(1,3),.(B,C)]
DT <- data.table(A = 1:5, B = c("a", "b", "c", "d", "e"), C = 6:10)
DT[c(1,3),.(B,C)]
ans <- DT[, .(B, val = A*C)]
target <- data.table(B = c("a", "b", "c", "d", "e",
"a", "b", "c", "d", "e"),
val = as.integer(c(6:10, 1:5)))
ans2 <- DT[, .(B, val = c(6:10, 1:5))]
ans2
DT <- data.table(A = 1:5, B = c("a", "b", "c", "d", "e"), C = 6:10)
# Subset rows 1 and 3, and columns B and C
DT[c(1,3),.(B,C)]
# Assign to ans the correct value
ans <- DT[, .(B, val = A*C)]
ans
# Fill in the blanks such that ans2 equals target
target <- data.table(B = c("a", "b", "c", "d", "e",
"a", "b", "c", "d", "e"),
val = as.integer(c(6:10, 1:5)))
ans2 <- DT[, .(B, val = c(6:10, 1:5))]
ans2
knitr::opts_chunk$set(echo = TRUE)
#install.packages("data.table")
library("data.table")
# Perform chained operations on DT
DT[, .(Sepal.Length = median(Sepal.Length),
Sepal.Width = median(Sepal.Width),
Petal.Length = median(Petal.Length),
Petal.Width = median(Petal.Width)),
by = Species][order(-Species)]
View(DT)
# The data.table DT is loaded in your workspace
DT <- as.data.table(iris)
DT[, .(Sepal.Length = median(Sepal.Length),
Sepal.Width = median(Sepal.Width),
Petal.Length = median(Petal.Length),
Petal.Width = median(Petal.Width)),
by = Species][order(-Species)]
DT <- data.table(grp=c(6,6,8,8,8), Q1=sample(5,replace=TRUE),
Q2=sample(5,replace=TRUE), Q3=sample(5,replace=TRUE),
H1=sample(5,replace=TRUE), H2=sample(5,replace=TRUE))
DT
DT <- data.table(grp=c(6,6,8,8,8), Q1=sample(5,replace=TRUE),
Q2=sample(5,replace=TRUE), Q3=sample(5,replace=TRUE),
H1=sample(5,replace=TRUE), H2=sample(5,replace=TRUE))
# A new data.table DT is available
# Calculate the sum of the Q columns
DT[,lapply(.SD, sum), .SDcols = 2:4]
# Calculate the sum of columns H1 and H2
DT[,lapply(.SD, sum), .SDcols = 5:6]
# Select all but the first row of groups 1 and 2, returning only the grp column and the Q columns
DT[, .SD[-1], by = grp, .SDcols = paste0("Q",1:3)]
# DT is pre-loaded
# Sum of all columns and the number of rows
DT[,lapply(.SD, sum), .SDcols= 1:3 ,by = x]
DT <- data.table(x=c(2,1,2,1,2,2,1), y=c(1,3,5,7,9,11,13), z=c(2,4,6,8,10,12,14))
# Sum of all columns and the number of rows
DT[,lapply(.SD, sum), .SDcols= 1:3 ,by = x]
number <- DT[,.N, by =x]
cbind(DT[,lapply(.SD, sum), .SDcols= 1:3 ,by = x],number[,.(N)])
# Cumulative sum of column x and y while grouping by x and z > 8
DT[,lapply(.SD, cumsum), by = .(by1= x, by2 = z>8), .SDcols= 1:2]
# DT is pre-loaded
DT <- data.table(x=c(2,1,2,1,2,2,1), y=c(1,3,5,7,9,11,13), z=c(2,4,6,8,10,12,14))
# Sum of all columns and the number of rows
DT[,c(lapply(.SD, sum),.N), by = x, .SDcols= c("x","y","z")]
# Cumulative sum of column x and y while grouping by x and z > 8
DT[,lapply(.SD, cumsum), by = .(by1= x, by2 = z>8), .SDcols= c("x","y")]
# The data.table DT
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)
# Add column by reference: Total
DT[, Total:= sum(B), by = A ]
# Add 1 to column B
DT[c(2,4), B:= B + 1L]
# Add a new column Total2
DT[2:4, Total2 := sum(B), by = A]
# Remove the Total column
DT[, Total := NULL]
# Select the third column using `[[`
DT[[3]]
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)
# Add column by reference: Total
DT[, Total:= sum(B), by = A ]
# Add 1 to column B
DT[c(2,4), B:= B + 1L]
# Add a new column Total2
DT[2:4, Total2 := sum(B), by = A]
# Remove the Total column
DT[, Total := NULL]
# Select the third column using `[[`
DT[[3]]
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)
DT[, Total:= sum(B), by = A ]
DT[c(2,4), B:= B + 1L]
DT[2:4, Total2 := sum(B), by = A]
DT[, Total := NULL]
DT[[3]]
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)
# Add column by reference: Total
DT[, Total:= sum(B), by = A ]
DT
# Add 1 to column B
DT[c(2,4), B:= B + 1L]
DT
# Add a new column Total2
DT[2:4, Total2 := sum(B), by = A]
DT
# Remove the Total column
DT[, Total := NULL]
DT
# Select the third column using `[[`
DT[[3]]
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)
# Add column by reference: Total
DT[, Total:= sum(B), by = A ]
# Add 1 to column B
DT[c(2,4), B:= B + 1L]
DT
# Add a new column Total2
DT[2:4, Total2 := sum(B), by = A]
DT
# Remove the Total column
DT[, Total := NULL]
DT
# Select the third column using `[[`
DT[[3]]
DT <- data.table(A = c(1, 1, 1, 2, 2), B = 1:5)
# Update B, add C and D
DT[, `:=`(B = B + 1, C = A + B,D = rep(2))]
# Delete my_cols
my_cols <- c("B", "C")
DT[, (my_cols) := NULL]
# Delete column 2 by number
DT[, c(2):= NULL]
set.seed(1)
DT <- data.table(A = sample(5,10,TRUE), B = sample(5,10,TRUE),
C = sample(5,10,TRUE), D = sample(5,10,TRUE))
# Set the seed
set.seed(1)
# Check the DT that is made available to you
DT
# For loop with set
for(i in 2:4) set(DT,sample(10,3),i, NA)
# Change the column names to lowercase
setnames(DT, tolower(names(DT)))
# Print the resulting DT to the console
DT
# Define DT
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
# Add a suffix "_2" to all column names
setnames(DT, paste0(names(DT),"_2"))
# Change column name "a_2" to "A2"
setnames(DT, "a_2", "A2")
# Reverse the order of the columns
setcolorder(DT, c("b_2", "A2"))
# Define DT
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
DT
# Add a suffix "_2" to all column names
setnames(DT, paste0(names(DT),"_2"))
DT
# Change column name "a_2" to "A2"
setnames(DT, "a_2", "A2")
DT
# Reverse the order of the columns
setcolorder(DT, c("b_2", "A2"))
DT
# The data.table package is pre-loaded
# Convert iris to a data.table
iris <- data.table(iris)
# Species is "virginica"
iris[Species == "virginica"]
# Species is either "virginica" or "versicolor"
iris[Species %in% c("virginica", "versicolor")]
# iris as a data.table
iris <- as.data.table(iris)
# Remove the "Sepal." prefix
setnames(iris, names(iris), gsub("^Sepal.", "", names(iris)))
# Remove the two columns starting with "Petal"
iris[, grep("^Petal", names(iris)):= NULL]
iris <- as.data.table(iris)
iris|
# Remove the "Sepal." prefix
setnames(iris, names(iris), gsub("^Sepal.", "", names(iris)))
iris
# Remove the two columns starting with "Petal"
iris[, grep("^Petal", names(iris)):= NULL]
iris
iris <- as.data.table(iris)
iris
# Remove the "Sepal." prefix
setnames(iris, names(iris), gsub("^Sepal.", "", names(iris)))
iris
# Remove the two columns starting with "Petal"
iris[, grep("^Petal", names(iris)):= NULL]
iris
iris
# Area is greater than 20 square centimeters
iris[ Width * Length> 20 ]
# Add new boolean column
iris[,is_large := Width * Length > 25]
# Now large observations with is_large
iris[is_large == TRUE]
# The 'keyed' data.table DT
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
B = c(5, 4, 1, 9, 8, 8, 6),
C = 6:12)
setkey(DT, A, B)
# Select the "b" group
DT["b"]
# "b" and "c" groups
DT[c("b","c")]
# The first row of the "b" and "c" groups
DT[c("b","c"), mult="first"]
# First and last row of the "b" and "c" groups
DT[c("b","c"), .SD[c(1,.N)], by= .EACHI]
# Copy and extend code for instruction 4: add printout
DT[c("b","c"), {print(.SD); .SD[c(1,.N)]}, by= .EACHI]
